# This Flow describes what forjj will need to do with plugins
---
name: "pull_request"
title: "Implement Pull request flow model, with origin and upstream repositories."
define: # Collection of plugin types
  upstream:
    # roles: # Array of upstream role name to assign to each upstream instances. by default, the role is upstream.
    # - "upstream"
    max_instances: 1 # Max number of upstream services a repo configured in Pull Request flow can accept.
    min_instances: 1 # Min number of upstream services a repo configured in Pull Request flow can accept.
  ci:
    max_instances: 1 # Max number of ci services a repo configured in Pull Request flow can accept.

# Flow can be used by operators to do usual git task (branching/clone/push/...)
flow: # All actions executed are ordered and executed one by one. If one step is failing forjj exit.
      # But some task at least ensure it to exists as requested.
  create: # Actions to do to create flow elements. We assume forjj has already do simple local work ie, local git repo exist and connected to the upstream repo.
    tasks:
      - cmd:
          git: ["checkout", "master"]
      - cmd:
          git: ["reset", "--hard", "HEAD"]
      - cmd:
          git: ["clean"]
      - cmd:
          git: ["fetch", "origin"]
      - cmd:
          git: ["pull"]
      - forj: # Call the instance role task called "fork".
        repoApp: upstream
        restapi: "fork/{{ .Repo.Name }}"
      - cmd:
          git: ["remote", "rename", "origin", "upstream"]
      - cmd:
          git: ["remote", "add", "origin", "{{ .Instances.upstream.Repo.{{ .Repo.Name }}.Remotes.origin }}"]
      - cmd:
          git: ["fetch", "origin"]

  new-work: # Actions to do to start a new work (forjj create or update)
    help: "To start a new work in your repository"
    parameters:
      - branch_name:
          help: 'Branch name to use for you new development in this repo {{ .Repo.Get "name"}}.'
    tasks:
      - cmd:
          git: ["symbolic-ref", "--short", "HEAD"]
          extract:
            regexp: "(.*)"
            capture:
              - branch_name
      - cmd:
          git: ["checkout", "-b", "{{ .Parameters.branch_name }}"]
      - cmd:
          git: ["push", "-u", "origin", "{{ .Parameters.branch_name }}"]

  work-done: # Actions to do to close a forjj task.
    help: "Push your work branch to git origin"
    parameters:
      - branch_name:
          help: 'Branch name to use for you new development in this repo {{ .Repo.Get "name"}}.'
    tasks:
      - cmd:
          git: ["push"]
      - forj:
          info: "Call 'forjj work-cleanup' when your pull request is approved and merged. It will remove your work branch called {{ .Branch }}"

  work-cleanup: # This action is suggested after a close.
    help: "Cleanup old work branch."
    tasks:
      - cmd:
          git: ["symbolic-ref", "--short", "HEAD"]
          extract:
            regexp: "(.*)"
            capture:
              - branch_name
      - cmd:
          git: ["checkout", "master"]
      - cmd:
          git: ["push", ":origin/{{ .Data.branch_name }}"]
      - cmd:
          git: ["branch", "-d", "{{ .Data.branch_name }}"]

  maintain: # Actions to do by the CI to maintain your forge.
    tasks:
      - cmd:
          git: ["checkout", "master"]
      - cmd:
          git: ["reset", "--hard", "HEAD"]
      - cmd:
          git: ["clean"]
      - cmd:
          git: ["pull"]

on-forjfile-do: # On top of loaded Forjfile (.Repo is not set)
  # ----------------
  set-default-ci:
    description: "Set 'jenkins' application name as default for all repositories"
    if:
      - rule: '{{ if .Forjfile.HasApps "driver:jenkins" "name:jenkins" }}true{{ end }}'
    set:
      forj-settings:
        default-repo-apps:
          ci: jenkins

  # ----------------
  jenkins-update-for-github: # update the list of features
    description: Set jenkins features for Github
    # Set if we found the repo attached to an upstream/github and attached to a ci/jenkins
    if:
      - rule: '{{ if .Forjfile.HasApps "driver:github"  }}true{{ end }}'
      - rule: '{{ if .Forjfile.HasApps "driver:jenkins" }}true{{ end }}'
    set: # Set object features with: map[string]map[string]<string|[]string>
      features:
        plugin:github: {}

  # ----------------
  jenkins-update-for-bitbucket: # update the list of features
    description: Set jenkins features for bitbucket
    # Set if we found the repo attached to an upstream/github and attached to a ci/jenkins
    if:
      - rule: '{{ if .Forjfile.HasApps "driver:bitbucket"  }}true{{ end }}'
      - rule: '{{ if .Forjfile.HasApps "driver:jenkins" }}true{{ end }}'
    set: # Set object features with: map[string]map[string]<string|[]string>
      features:
        plugin:bitbucket: {}

  # ----------------
  jenkins-update-for-gitlab: # update the list of features
    description: Set jenkins features for Gitlab
    # Set if we found the repo attached to an upstream/github and attached to a ci/jenkins
    if:
      - rule: '{{ if .Forjfile.HasApps "driver:gitlab"  }}true{{ end }}'
      - rule: '{{ if .Forjfile.HasApps "driver:jenkins" }}true{{ end }}'
    set: # Set object features with: map[string]map[string]<string|[]string>
      features:
        plugin:gitlab-plugin: {}

on-repo-do: # On top of loaded Forjfile for a specific Repo given by Forjj:
  # ----------------
  create-github-webhook-to-jenkins:
    description: Define the jenkins webhook
    if:
      - rule: '{{ if .Repo.HasApps "driver:github"  }}true{{ end }}'
      - rule: '{{ if .Repo.HasApps "driver:jenkins" }}true{{ end }}'
      - rule: '{{ if .Repo.IsDeployable }}true{{ end }}'
      - rule: '{{ if or (not (.Repo.HasApps "driver:jenkins" "deploy-public-service-url:")) (not (.Repo.HasApps "driver:jenkins" "deploy-service-addr:localhost")) }}true{{ end }}'

    loop-on-list:
      - name: jenkins
        list: GetApps
        parameters:
          - "driver:jenkins"
      - name: github
        list: GetApps
        parameters:
          - "driver:github"
    set:
      webhooks: # set a webhook in loaded Forjfile to jenkins server
        '{{ .List.jenkins.Get "name" }}-{{ .List.github.Get "name" }}':
          url: |
            {{ if .List.jenkins.Get "deploy-public-service-url" }}\
            {{    .List.jenkins.Get "deploy-public-service-url" }}\
            {{ else }}\
            {{/* Protocol setup         */}}http{{ if not (eq (.List.jenkins.Get "ssl-method") "none") }}s{{end}}://\
            {{/* ServerName setup       */}}{{ .List.jenkins.Get "deploy-service-addr" }}\
            {{   $PORT := (.List.jenkins.Get "deploy-service-port") }}\
            {{   if eq (.List.jenkins.Get "ssl-method") "none" }}\
            {{/* http ServerPort setup  */}}{{ if (and (not (eq $PORT "80")) $PORT)  }}:{{ $PORT }}{{ end }}\
            {{   else }}\
            {{/* https ServerPort setup */}}{{ if (and (not (eq $PORT "443")) $PORT) }}:{{ $PORT }}{{ end }}\
            {{   end }}\
            {{ end }}\
            /github-webhook/\
          events: pull_request,push
          repos: |
            {{ $HOOK := (concatenate (.List.jenkins.Get "name") "-" (.List.github.Get "name")) }}\
            {{ $EXISTING_REPOS := .Forjfile.Get "webhooks" $HOOK "repos" }}\
            {{ if $EXISTING_REPOS }}\
            {{    $EXISTING_REPOS }},{{ .Repo.Get "name" }}\
            {{ else }}\
            {{    .Repo.Get "name" }}\
            {{ end }}\
          app: '{{ .List.github.Get "name" }}'
          ssl-check: '{{ .Forjfile.Get "app" (.List.jenkins.Get "name") "github-webhook-ssl-check" }}'

  create-bitbucket-webhook-to-jenkins:
    description: Define the jenkins webhook for bitbucket
    if:
      - rule: '{{ if .Repo.HasApps "driver:bitbucket"  }}true{{ end }}'
      - rule: '{{ if .Repo.HasApps "driver:jenkins" }}true{{ end }}'
      - rule: '{{ if .Repo.IsDeployable }}true{{ end }}'
      - rule: '{{ if or (not (.Repo.HasApps "driver:jenkins" "deploy-public-service-url:")) (not (.Repo.HasApps "driver:jenkins" "deploy-service-addr:localhost")) }}true{{ end }}'

    loop-on-list:
      - name: jenkins
        list: GetApps
        parameters:
          - "driver:jenkins"
      - name: bitbucket
        list: GetApps
        parameters:
          - "driver:bitbucket"
    set:
      webhooks: # set a webhook in loaded Forjfile to jenkins server
        '{{ .List.jenkins.Get "name" }}-{{ .List.bitbucket.Get "name" }}':
          url: |
            {{/* Protocol setup         */}}http{{ if not (eq (.List.jenkins.Get "ssl-method") "none") }}s{{end}}://\
            {{/* ServerName setup       */}}{{ .List.jenkins.Get "deploy-service-addr" }}\
            {{ $PORT := (.List.jenkins.Get "deploy-service-port") }}\
            {{ if eq (.List.jenkins.Get "ssl-method") "none" }}\
            {{/* http ServerPort setup  */}}{{ if (and (not (eq $PORT "80")) $PORT)  }}:{{ $PORT }}{{ end }}\
            {{ else }}\
            {{/* https ServerPort setup */}}{{ if (and (not (eq $PORT "443")) $PORT) }}:{{ $PORT }}{{ end }}\
            {{ end }}\
            /bitbucket-hook/\
          events: pull_request,push
          repos: |
            {{ $HOOK := (concatenate (.List.jenkins.Get "name") "-" (.List.bitbucket.Get "name")) }}\
            {{ $EXISTING_REPOS := .Forjfile.Get "webhooks" $HOOK "repos" }}\
            {{ if $EXISTING_REPOS }}\
            {{    $EXISTING_REPOS }},{{ .Repo.Get "name" }}\
            {{ else }}\
            {{    .Repo.Get "name" }}\
            {{ end }}\
          app: '{{ .List.bitbucket.Get "name" }}'
          ssl-check: '{{ .Forjfile.Get "app" (.List.jenkins.Get "name") "github-webhook-ssl-check" }}'

  create-gitlab-webhook-to-jenkins:
    description: Define the jenkins webhook for gitlab
    if:
      - rule: '{{ if .Repo.HasApps "driver:gitlab"  }}true{{ end }}'
      - rule: '{{ if .Repo.HasApps "driver:jenkins" }}true{{ end }}'
      - rule: '{{ if .Repo.IsDeployable }}true{{ end }}'
      - rule: '{{ if or (not (.Repo.HasApps "driver:jenkins" "deploy-public-service-url:")) (not (.Repo.HasApps "driver:jenkins" "deploy-service-addr:localhost")) }}true{{ end }}'

    loop-on-list:
      - name: jenkins
        list: GetApps
        parameters:
          - "driver:jenkins"
      - name: gitlab
        list: GetApps
        parameters:
          - "driver:gitlab"
    set:
      webhooks: # set a webhook in loaded Forjfile to jenkins server
        '{{ .List.jenkins.Get "name" }}-{{ .List.gitlab.Get "name" }}':
          url: |
            {{/* Protocol setup         */}}http{{ if not (eq (.List.jenkins.Get "ssl-method") "none") }}s{{end}}://\
            {{/* ServerName setup       */}}{{ .List.jenkins.Get "deploy-service-addr" }}\
            {{ $PORT := (.List.jenkins.Get "deploy-service-port") }}\
            {{ if eq (.List.jenkins.Get "ssl-method") "none" }}\
            {{/* http ServerPort setup  */}}{{ if (and (not (eq $PORT "80")) $PORT)  }}:{{ $PORT }}{{ end }}\
            {{ else }}\
            {{/* https ServerPort setup */}}{{ if (and (not (eq $PORT "443")) $PORT) }}:{{ $PORT }}{{ end }}\
            {{ end }}\
            /project/{{ .Repo.Name }}
          events: pull_request,push
          repos: |
            {{ $HOOK := (concatenate (.List.jenkins.Get "name") "-" (.List.gitlab.Get "name")) }}\
            {{ $EXISTING_REPOS := .Forjfile.Get "webhooks" $HOOK "repos" }}\
            {{ if $EXISTING_REPOS }}\
            {{    $EXISTING_REPOS }},{{ .Repo.Get "name" }}\
            {{ else }}\
            {{    .Repo.Get "name" }}\
            {{ end }}\
          app: '{{ .List.gitlab.Get "name" }}'
          ssl-check: '{{ .Forjfile.Get "app" (.List.jenkins.Get "name") "github-webhook-ssl-check" }}'

  # ----------------
  create-seedjobs:
    description: Set project
    if: # if_each will test each and execute the `set` for each object instances.
      - rule: '{{ if or (or (.Repo.HasApps "driver:github") (.Repo.HasApps "driver:gitlab")) (.Repo.HasApps "driver:bitbucket") }}true{{ end }}'
      - rule: '{{ if .Repo.IsDeployable }}true{{ end }}'
    set:
      projects:
        '{{ .Repo.Get "name" }}': {}

